{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ec1b54d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original secret: 1234567890\n",
      "Using (3,5) threshold scheme\n",
      "Prime field: 115792089237316195423570985008687907853269984665640564039457584007913129639747\n",
      "\n",
      "Generated 5 shares:\n",
      "Share 1: (1, 72514519240274003006264100331259603517520198916386029117350841458886186322033)\n",
      "Share 2: (2, 30116364479644255964637654235120400301662035785335970709615229289718817450527)\n",
      "Share 3: (3, 104389714192743149722262631728958206058965479938130952855708331508325387232866)\n",
      "Share 4: (4, 63750389904938293431997062795397205082890562043489847476714980098879636389556)\n",
      "Share 5: (5, 23990480853545882517411932443125305226707266767053218612092759069294694560344)\n",
      "\n",
      "Reconstructing secret with first 3 shares:\n",
      "Using share: (1, 72514519240274003006264100331259603517520198916386029117350841458886186322033)\n",
      "Using share: (2, 30116364479644255964637654235120400301662035785335970709615229289718817450527)\n",
      "Using share: (3, 104389714192743149722262631728958206058965479938130952855708331508325387232866)\n",
      "Recovered secret: 1234567890\n",
      "Success: True\n",
      "\n",
      "Reconstructing secret with different 3 shares:\n",
      "Using share: (1, 72514519240274003006264100331259603517520198916386029117350841458886186322033)\n",
      "Using share: (3, 104389714192743149722262631728958206058965479938130952855708331508325387232866)\n",
      "Using share: (5, 23990480853545882517411932443125305226707266767053218612092759069294694560344)\n",
      "Recovered secret: 1234567890\n",
      "Success: True\n",
      "\n",
      "Attempting to reconstruct with only 2 shares (insufficient):\n",
      "Using share: (1, 72514519240274003006264100331259603517520198916386029117350841458886186322033)\n",
      "Using share: (2, 30116364479644255964637654235120400301662035785335970709615229289718817450527)\n",
      "Error: Need at least 3 shares to reconstruct secret\n",
      "This demonstrates information-theoretic security\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "from math import gcd\n",
    "from functools import reduce\n",
    "\n",
    "class ShamirSecretSharing:\n",
    "    \"\"\"\n",
    "    Implementation of Shamir's Secret Sharing Scheme (k,n)\n",
    "    \n",
    "    This cryptographic algorithm allows a secret to be divided into n shares,\n",
    "    where any k shares can reconstruct the original secret, but k-1 shares\n",
    "    reveal no information about the secret.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, k, n, prime=None):\n",
    "        \"\"\"\n",
    "        Initialize the Shamir Secret Sharing scheme\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        k : int\n",
    "            Threshold - minimum number of shares needed to reconstruct the secret\n",
    "        n : int\n",
    "            Total number of participants/shares to generate\n",
    "        prime : int, optional\n",
    "            Prime number defining the finite field Zp\n",
    "            If not provided, a large 256-bit prime is used\n",
    "        \n",
    "        Raises:\n",
    "        -------\n",
    "        ValueError\n",
    "            If k > n or k < 2 or prime is not a prime number\n",
    "        \"\"\"\n",
    "        if k > n:\n",
    "            raise ValueError(\"Threshold k cannot be greater than total participants n\")\n",
    "        if k < 2:\n",
    "            raise ValueError(\"Threshold k must be at least 2\")\n",
    "            \n",
    "        self.k = k\n",
    "        self.n = n\n",
    "        \n",
    "        # If no prime is provided, use a large 256-bit prime\n",
    "        if prime is None:\n",
    "            # This is a well-known 256-bit prime used in cryptography\n",
    "            self.prime = 115792089237316195423570985008687907853269984665640564039457584007913129639747\n",
    "        else:\n",
    "            if not self._is_prime(prime):\n",
    "                raise ValueError(\"The 'prime' parameter must be a prime number\")\n",
    "            self.prime = prime\n",
    "    \n",
    "    def _is_prime(self, n):\n",
    "        \"\"\"\n",
    "        Simple primality test using trial division\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        n : int\n",
    "            Number to test for primality\n",
    "            \n",
    "        Returns:\n",
    "        --------\n",
    "        bool\n",
    "            True if n is prime, False otherwise\n",
    "        \"\"\"\n",
    "        if n <= 1:\n",
    "            return False\n",
    "        if n <= 3:\n",
    "            return True\n",
    "        if n % 2 == 0 or n % 3 == 0:\n",
    "            return False\n",
    "        i = 5\n",
    "        while i * i <= n:\n",
    "            if n % i == 0 or n % (i + 2) == 0:\n",
    "                return False\n",
    "            i += 6\n",
    "        return True\n",
    "    \n",
    "    def _mod_inverse(self, a, m):\n",
    "        \"\"\"\n",
    "        Calculate the modular inverse: a^(-1) mod m\n",
    "        \n",
    "        Uses the Extended Euclidean Algorithm to find the inverse\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        a : int\n",
    "            Number to find the inverse of\n",
    "        m : int\n",
    "            Modulus\n",
    "            \n",
    "        Returns:\n",
    "        --------\n",
    "        int\n",
    "            The modular inverse of a modulo m\n",
    "            \n",
    "        Raises:\n",
    "        -------\n",
    "        ValueError\n",
    "            If modular inverse doesn't exist (gcd(a,m) != 1)\n",
    "        \"\"\"\n",
    "        if gcd(a, m) != 1:\n",
    "            raise ValueError(\"Modular inverse does not exist\")\n",
    "        \n",
    "        def extended_gcd(a, b):\n",
    "            \"\"\"Extended Euclidean Algorithm\"\"\"\n",
    "            if a == 0:\n",
    "                return b, 0, 1\n",
    "            gcd, x1, y1 = extended_gcd(b % a, a)\n",
    "            x = y1 - (b // a) * x1\n",
    "            y = x1\n",
    "            return gcd, x, y\n",
    "        \n",
    "        _, x, _ = extended_gcd(a, m)\n",
    "        return (x % m + m) % m\n",
    "    \n",
    "    def _evaluate_polynomial(self, coefficients, x, prime):\n",
    "        \"\"\"\n",
    "        Evaluate polynomial at point x in finite field Zp\n",
    "        \n",
    "        Uses Horner's method for efficient polynomial evaluation\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        coefficients : list\n",
    "            Polynomial coefficients [a0, a1, a2, ..., an]\n",
    "        x : int\n",
    "            Point at which to evaluate the polynomial\n",
    "        prime : int\n",
    "            Prime number defining the finite field\n",
    "            \n",
    "        Returns:\n",
    "        --------\n",
    "        int\n",
    "            Value of polynomial at x modulo prime\n",
    "        \"\"\"\n",
    "        result = 0\n",
    "        # Horner's method: start from highest degree coefficient\n",
    "        for coeff in reversed(coefficients):\n",
    "            result = (result * x + coeff) % prime\n",
    "        return result\n",
    "    \n",
    "    def split_secret(self, secret):\n",
    "        \"\"\"\n",
    "        Split a secret into n shares using Shamir's Secret Sharing\n",
    "        \n",
    "        Creates a random polynomial of degree (k-1) where f(0) = secret,\n",
    "        then evaluates the polynomial at n different points\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        secret : int\n",
    "            The secret to be shared (must be non-negative and less than prime)\n",
    "            \n",
    "        Returns:\n",
    "        --------\n",
    "        list of tuples\n",
    "            List of n shares, each share is a tuple (x, y) where y = f(x)\n",
    "            \n",
    "        Raises:\n",
    "        -------\n",
    "        ValueError\n",
    "            If secret is invalid (negative or greater than prime)\n",
    "        \"\"\"\n",
    "        if not isinstance(secret, int) or secret < 0:\n",
    "            raise ValueError(\"Secret must be a non-negative integer\")\n",
    "        \n",
    "        if secret >= self.prime:\n",
    "            raise ValueError(f\"Secret must be less than prime {self.prime}\")\n",
    "        \n",
    "        # Create random coefficients for polynomial of degree (k-1)\n",
    "        coefficients = [secret]  # aâ‚€ = secret (the constant term)\n",
    "        for _ in range(self.k - 1):\n",
    "            # Choose random coefficient in Zp\n",
    "            coeff = random.randint(1, self.prime - 1)\n",
    "            coefficients.append(coeff)\n",
    "        \n",
    "        # Generate n shares by evaluating polynomial at points 1 to n\n",
    "        shares = []\n",
    "        for i in range(1, self.n + 1):\n",
    "            # Calculate f(i)\n",
    "            y = self._evaluate_polynomial(coefficients, i, self.prime)\n",
    "            shares.append((i, y))\n",
    "        \n",
    "        return shares\n",
    "    \n",
    "    def reconstruct_secret(self, shares):\n",
    "        \"\"\"\n",
    "        Reconstruct the secret from k or more shares\n",
    "        \n",
    "        Uses Lagrange interpolation to find f(0), which is the secret\n",
    "        \n",
    "        Parameters:\n",
    "        -----------\n",
    "        shares : list of tuples\n",
    "            List of shares, each share is a tuple (x, y)\n",
    "            \n",
    "        Returns:\n",
    "        --------\n",
    "        int\n",
    "            The reconstructed secret\n",
    "            \n",
    "        Raises:\n",
    "        -------\n",
    "        ValueError\n",
    "            If fewer than k shares are provided\n",
    "        \"\"\"\n",
    "        if len(shares) < self.k:\n",
    "            raise ValueError(f\"Need at least {self.k} shares to reconstruct secret\")\n",
    "        \n",
    "        # Use only the first k shares\n",
    "        shares = shares[:self.k]\n",
    "        \n",
    "        # Extract x and y values\n",
    "        x_values, y_values = zip(*shares)\n",
    "        \n",
    "        # Calculate secret S = f(0) using Lagrange interpolation\n",
    "        secret = 0\n",
    "        for i in range(self.k):\n",
    "            # Calculate Lagrange basis polynomial L_i(0)\n",
    "            numerator = 1\n",
    "            denominator = 1\n",
    "            for j in range(self.k):\n",
    "                if i != j:\n",
    "                    # For x = 0: numerator = product of (0 - xj)\n",
    "                    numerator = (numerator * (0 - x_values[j])) % self.prime\n",
    "                    # denominator = product of (xi - xj)\n",
    "                    denominator = (denominator * (x_values[i] - x_values[j])) % self.prime\n",
    "            \n",
    "            # Calculate modular inverse of denominator\n",
    "            inv_denominator = self._mod_inverse(denominator, self.prime)\n",
    "            \n",
    "            # Update secret: S += yi * L_i(0)\n",
    "            term = (y_values[i] * numerator * inv_denominator) % self.prime\n",
    "            secret = (secret + term) % self.prime\n",
    "        \n",
    "        return secret\n",
    "\n",
    "# Example usage and demonstration\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Demonstrate Shamir's Secret Sharing with a (3,5) scheme\n",
    "    \"\"\"\n",
    "    # (3,5) scheme: need at least 3 out of 5 shares to recover secret\n",
    "    k, n = 3, 5\n",
    "    \n",
    "    # Create Shamir Secret Sharing instance\n",
    "    sss = ShamirSecretSharing(k, n)\n",
    "    \n",
    "    # Secret to be shared\n",
    "    secret = 1234567890\n",
    "    \n",
    "    print(f\"Original secret: {secret}\")\n",
    "    print(f\"Using ({k},{n}) threshold scheme\")\n",
    "    print(f\"Prime field: {sss.prime}\")\n",
    "    print()\n",
    "    \n",
    "    # Split the secret into shares\n",
    "    shares = sss.split_secret(secret)\n",
    "    print(f\"Generated {n} shares:\")\n",
    "    for i, share in enumerate(shares):\n",
    "        print(f\"Share {i+1}: {share}\")\n",
    "    print()\n",
    "    \n",
    "    # Reconstruct secret with exactly k shares\n",
    "    print(f\"Reconstructing secret with first {k} shares:\")\n",
    "    first_k_shares = shares[:k]\n",
    "    for share in first_k_shares:\n",
    "        print(f\"Using share: {share}\")\n",
    "    \n",
    "    recovered_secret = sss.reconstruct_secret(first_k_shares)\n",
    "    print(f\"Recovered secret: {recovered_secret}\")\n",
    "    print(f\"Success: {recovered_secret == secret}\")\n",
    "    print()\n",
    "    \n",
    "    # Try with different k shares\n",
    "    print(f\"Reconstructing secret with different {k} shares:\")\n",
    "    different_shares = [shares[0], shares[2], shares[4]]\n",
    "    for share in different_shares:\n",
    "        print(f\"Using share: {share}\")\n",
    "    \n",
    "    recovered_secret = sss.reconstruct_secret(different_shares)\n",
    "    print(f\"Recovered secret: {recovered_secret}\")\n",
    "    print(f\"Success: {recovered_secret == secret}\")\n",
    "    print()\n",
    "    \n",
    "    # Demonstrate that k-1 shares are insufficient\n",
    "    print(f\"Attempting to reconstruct with only {k-1} shares (insufficient):\")\n",
    "    try:\n",
    "        insufficient_shares = shares[:k-1]\n",
    "        for share in insufficient_shares:\n",
    "            print(f\"Using share: {share}\")\n",
    "        \n",
    "        sss.reconstruct_secret(insufficient_shares)\n",
    "    except ValueError as e:\n",
    "        print(f\"Error: {e}\")\n",
    "        print(\"This demonstrates information-theoretic security\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6011438d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
